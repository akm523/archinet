https://github.com/couchbase/couchbase-jvm-core/commit/530fbcc418568f0ca1b90c2639ec2605ff4f34b0,core changes for deferred queries support,,adaptive,,test,deferred support,,,
https://github.com/couchbase/couchbase-jvm-core/commit/dfc164ccf6d03b7ce7e3eeb2a64ee3bb0b581765,wrap raw config into context as a first step of fixing the code needs to be prepared to send around not the raw config alone but more information associated,,preventive,,test,wrap,,,
https://github.com/couchbase/couchbase-jvm-core/commit/7bbd6158126d468bb5aad457d58ce500e529510c,rename zombie* to orphan* both names have been used internally but we settled on orphan reporting instead of zombie reporting so this changeset renames the appropriate classes and log messages,,preventive,,test,rename to,,,
https://github.com/couchbase/couchbase-jvm-core/commit/78222b212ab2b5ea79ca448584e9dfdc00ef481f,separate tracing from zombie response logging,,preventive,,test,separate,,,
https://github.com/couchbase/couchbase-jvm-core/commit/c34df209c58a5ce39f48bb0903ce24fc744fe3a3,remove encryption here as it moved to separate repo new repo https://github<prd>com/couchbase/couchbase-java-client-crypto-extension,,preventive,,test,remove move separate,,,
https://github.com/couchbase/couchbase-jvm-core/commit/09f27f6753a0be954c33aac8f46722467795f912,consolidate jackson object mappers this changeset doesn't have any functional changes it only consolidates the myriad of objectmapper instances into a helper class and just calls it from there gardening you know,,preventive,,test,consolidate,,,
https://github.com/couchbase/couchbase-jvm-core/commit/a459f389dd8970c035bd42329a72e0bded0a1389,refactor how spans and requests link this changeset mixes up some parts where previously data would be stored as baggage is now stored on the request itself this is needed so that even without tracing in scope or enabled additional information on the timeout exception can be logged,,preventive,,test,refactor,,,
https://github.com/couchbase/couchbase-jvm-core/commit/261f176cf10d840e8342bd56244f02aa61c2f56f,bump dependencies to releases as part of the regular dep bump this change makes sure all of our dependencies are up-to-date,,preventive,,test,bump dependencies,,,
https://github.com/couchbase/couchbase-jvm-core/commit/8d7fe62b9d0d66acc421673440753f41a0a3dcd9,propagate corecontext into endpoints this changeset propagates the context from the service into the endpoints and adapts the to work with the new interfaces,,preventive,,test,propagate,,,
https://github.com/couchbase/couchbase-jvm-core/commit/1007399f097ebda8075b94ab3002213fd7d4edff,create corecontext this is the first of a couple changesets which propagate a corecontext down into the individual components rather than individual objects independently this makes it a little bit easier to reason about core-global state but also allows us in the future to add more context (for example the core-identifier we need for the new hello),,preventive,,test,down into individual easier reason allows future,,,
https://github.com/couchbase/couchbase-jvm-core/commit/eb2567091d5a6207c7156e22a1025c31c92f13a8,remove dcp from core-io dcp has been factored out into its own project (which has core-io as a dependency) and we've deprecated it couple months ago,,preventive,,,remove from factored out deprecated,,,
https://github.com/couchbase/couchbase-jvm-core/commit/27e69ed440998d6999b478361f5388aac0ac3c39,close latencystats on removal latencystats is holding a weak reference to the pause detector and it makes sense to clean them up to save the gc some work and also avoid bloating if the gc is not cleaning them up right away,,preventive,,,removal clean up,,,
https://github.com/couchbase/couchbase-jvm-core/commit/d57a80739457a374ef58cc9345f9a76945969f29,move connstr handling to jvm core move connection string handling to core-io so other projects that depend on core can use it changes ------- moved connectionstring class to utils from java client and also moved the result ------ other dependent projects like kafka can use connection string,,preventive,,,move to,,,
https://github.com/couchbase/couchbase-jvm-core/commit/77097f10c870036c5890324ca3c10dc232a6fe50,move onerror calls onto scheduler like with onnext calls it is important that (if not configured to do so explicitly) onerror callbacks are also executed on the scheduler (and not run directly on the threads where called),,preventive,,,move onto,,,
https://github.com/couchbase/couchbase-jvm-core/commit/d9cd0a07013c877af6646a8e49487d57f2835a78,add generic restapirequest for 8091 the sdk has native apis for some number of cluster management calls but for the rest of the cluster's rest api a simplified client could make sense this can be done for port 8091 endpoints via a dedicated message in the core using confighandler,,preventive,,,simplified client,,,
https://github.com/couchbase/couchbase-jvm-core/commit/bddbdae7e92e13112e649eca4d35f786599f4493,use the same logical connection for all dcp nodes dcp connection have to be opened on each node separately but from the sdk perspective there is only one logical connection and stream but current implementation was creating logical connection for every node and only first connection was actually visible to the consumer,,preventive,,,use same all separately,,,
https://github.com/couchbase/couchbase-jvm-core/commit/72b6a7b091fbc76caaac5f869fe9cd7e5f8785f2,avoid node[] allocations on the send path the locators pick the right nodes and return them as a node[] which in return gets iterated again and the requests send to each node,,preventive,,,moves into,,right saved,
https://github.com/couchbase/couchbase-jvm-core/commit/4edf12e86b128f70957cd86c828f92bb480d6c22,disable subdoc multi-mutation support the protocol for multiple mutations is likely to change before a dp version of the server is released so offering support for it is too early,,preventive,,,made public commented,,change support,version
https://github.com/couchbase/couchbase-jvm-core/commit/0fadafd05db3a91a3bd05dea2844e96d143cfb5f,rename systemmetricsevent to runtimemetricsevent while writing the docs for this feature it became visible that the name was poorly chosen because we have a system event type and the systemmetricsevent is a metric event type all very confusing,,preventive,,,rename to,,features,
https://github.com/couchbase/couchbase-jvm-core/commit/47f21f67c623fbc717fdd765a1fcbeff58145ea5,let handlers expose their servicetype in preparation for the extended metric support it is key that each handler exposes the service type so it can be stitched together later in a consistent manner,,preventive,,,Expose stitched together ,,consistent ,
https://github.com/couchbase/couchbase-jvm-core/commit/50a9b4ee68644ae6fe774258b65b33a660a71453,clarify mutationtoken the mutationdescriptor while accurate should be replaced with a more descriptive name: mutationtoken in addition the vbucket id needs to be added in order to be useful for ryow,,preventive,,,clarify replaced name,,added,
https://github.com/couchbase/couchbase-jvm-core/commit/b1f2491160d35b7e583da4bc37253e134c045db8,fix dcp compatibility with transient endpoints somewhere between 110 dp and ga some code was reworked and parts of the experimental dcp support was broken this changeset fixes the compatibility,,preventive,,,reworked,,,compatibility
https://github.com/couchbase/couchbase-jvm-core/commit/e5bba102005d943f8bd337853b01db69a6e39eb9,make responses reference counted to make it easier to release byte buffers without actually needing to know all the implementation details the appropriate responses can be made reference counted themselves,,preventive,,,Make easier,,appropriate,
https://github.com/couchbase/couchbase-jvm-core/commit/c52ced6aca922012547f25d46eaa70dfc473409d,centralize responsestatus conversion the response status is converted in many places since every handler needs to do this of some sort it turns out that the functionality itself is very redundant so it can easily be centralized,,preventive,,,centralize places easily,,redundant,
https://github.com/couchbase/couchbase-jvm-core/commit/15bfedaa54a0f4e9d2cfe832d0dfeeea1ba37c97,expose a message to fetch the configuration provider if the language bindings need access to the configuration provider they can grab it with a specific request,,preventive,,,expose,,,
https://github.com/couchbase/couchbase-jvm-core/commit/8d8fb4ef66d92aa15f695c900cec0968a8f24c39,extract partitioninfo in its own class the partitioninfo originally part of the couchbasebucketconfig needs to be extracted out so that proper unit can be added it is large enough to stand alone,,preventive,,,extract in out,,proper,
https://github.com/couchbase/couchbase-jvm-core/commit/13ac38cff33c9603333453c4e39085e9e3ac7530,move handler subjects onto different scheduler when subjects are emitted from the io threads the code needs to make sure that the following operators (from external code) are never executed on the io threads to avoid the risk of stalling,,preventive,,,move onto different,,,
https://github.com/couchbase/couchbase-jvm-core/commit/81ba4af399a6d697cf51312f9d1c9f531b965597,move observe utility class from java-client each wrapper of core-io library have to implement observe polling feature this way is more error prone and harder to maintain good quality of this implementation which in fact will be shared,,preventive,,,move from,,harder feature quality,
https://github.com/couchbase/couchbase-jvm-core/commit/5005bda5d79267d2bf206b2d8f46b6990e3b4c50,"rework endpoint handlers for more fine-grained control on completion this changeset adds a very simple state enum to the decoding process and makes it possible that the implementing child handlers signal its parent when they are done with the current response even when more chunks arrive in the meantime this is necessary because it could be that some streaming responses push out chunks to subsequent observables even when the main ""response"" one is already done the previous implementation did fall short on this and resulted in potential deadlocks",,preventive,,,rework,,,
https://github.com/couchbase/couchbase-jvm-core/commit/eac3e586caf8752b0fb65df8a1da956c090e80b5,rename binary services/endpoints and associated to keyvalue this changeset renames the binary* parts to key value in order to better reflect what they are doing binary is too ambigous,,preventive,,,rename,,,
https://github.com/couchbase/couchbase-jvm-core/commit/422f105aa21881bdb008d55a13b911ddefafb569,refactor configuration handling this changeset gets rid of the config depdencency and adds all needed properties for the environment with an elegant builder which also respects system properties that take precedence the architecture also allows to be later extended on dynamic properties that can either poll during the app lifetime or also be exposed through jmx,,preventive,,,gets rid dependency,,,
https://github.com/couchbase/couchbase-jvm-core/commit/0638858ee885c4cb133dcdab55c0f985e874d20a,endpoint refactoring - consolidates the generic handler with the actual endpoint handler for better utilization - cleanup and unit,,preventive,,,consolidates with cleanup,,,
https://github.com/couchbase/couchbase-jvm-core/commit/5d5c6505b6dab7e9a0df007bfb0c9a37e986a819,removing yet unneeded code,,preventive,,,removing,,,
https://github.com/couchbase/couchbase-jvm-core/commit/8813407db6265a3168a488a50e337a588473a14e,refactoring and more config stuff,,preventive,,,refactoring,,,
https://github.com/couchbase/couchbase-jvm-core/commit/23c1043437b91817ac99fab9943cd3d0d6a26233,proactively fetch config from http if signaled previously when an http stream is attached to fetch a configuration it has been trusted to always send a proper one in a short timeframe when the socket has been closed a new stream would be opened this does not account for the fact that a socket can end up in an half/closed (dead) state and the client never knows that it has been closed upon it since a dead socket is not distinguishable from a socket where no config stream events are sent over a new mechanism needs to be added in order to return to a healthy state,,perfective,,test,fetch from,,,
https://github.com/couchbase/couchbase-jvm-core/commit/852fa665a4e58ec4dd814d2ede9da4191e310165,properly close configendpoints when service disconnects while working on a related code-change it was found that when an endpoint disconnects it is properly removed from the states but when this service in total is disconnected (ie if the node is removed) then the service sticks around potentially leaving endpoints connected when they shouldn't be,,perfective,,test,properly close,,,
https://github.com/couchbase/couchbase-jvm-core/commit/b813ba870a38b14713bddc1942569caf63523123,store http response code in search response the language binding needs to decide what to do based on the raw http status code so this change just exposes it as part of the response,,perfective,,test,store needs,,,
https://github.com/couchbase/couchbase-jvm-core/commit/2c231a7430c33790d7ff95ad9f3bf4977b973735,add kv id to document span tag this changeset in-line with the rfc errata adds the document key to the span as a tag if log redaction is not enabled while being in there fixed a minor issue with non-atomic volatile updates which is not really an issue but should be fixed nonetheless,,perfective,,test,add to,,,
https://github.com/couchbase/couchbase-jvm-core/commit/35de201b0d2f510f606e2eb99302db55c54af876,distinguish between nodes on the same physical host this changeset makes it possible that multiple nodes are exposed via the same physical host but just on different port ranges this is only possible right now via the alternate names config,,perfective,,test,makes possible,,,
https://github.com/couchbase/couchbase-jvm-core/commit/00c6486c7ef0713800a3a96baebbc8eb70d25cc2,improve *serviceconfig and related javadoc the service configs themselves and the api in the environment was lacking proper javadoc for the functionality which led to some confusion this changeset substantially extends the javadocs in this area,,perfective,,test,improve lacking,,,
https://github.com/couchbase/couchbase-jvm-core/commit/fe6823993b5e7463b259a588a3fc04bca6c21d3f,improve ring buffer diagnostics recently added diagnostics on the internal ring-buffer used in the java client these are currently only available through a thrown backpressureexception so this change gives access to these useful diagnostics through an api,,perfective,,test,improve gives access,,,
https://github.com/couchbase/couchbase-jvm-core/commit/38e2a9a4214cd60808051e38eb235f4311be1afe,improve ring buffer diagnostics when core-io's ringbuffer is filled a backpressureexception is thrown to the app this change is to provide some additional helpful diagnostics in the exception,,perfective,,test,improve additional,,,
https://github.com/couchbase/couchbase-jvm-core/commit/c0ce3c106658739045b4266262b7f39c03f17a63,use origin instead of localhost for nodesext if the hostname from nodesext is missing the code should not use the hardcoded localhost but rather the origin (similar to the replace ops already in place),,perfective,,test,use instead,,,
https://github.com/couchbase/couchbase-jvm-core/commit/d9c9ca5d8ff0955b25b4bf8cee630de5f8672f83,discard read bytes in the parser after the value has been emitted the read bytes from the response content can be discarded verified by unit and also integration verified manually with 2 million documents,,perfective,,test,discard,,,
https://github.com/couchbase/couchbase-jvm-core/commit/7929277343bceebe29441aa5ba0dfd48300d2429,add more compression controls based on discussion and rfc more compression controls need to be available so the actual behavior can be tailored to the users requirements,,perfective,,test,add more,,,
https://github.com/couchbase/couchbase-jvm-core/commit/603c89cb984d69e1e07e6d9f9ecf5314cfaa1209,various updates and n1ql support this changeset changes some of the nuances how spans are handled and brings support for n1ql queries,,adaptive,,,support BBB,,,
https://github.com/couchbase/couchbase-jvm-core/commit/3b395fded2bead706123330ab63bb09af5913975,"add field level encryption support support for encrypted fields add cryptographic algorithm providers and key store providers implementations changes ------- - add key store provider pluggable interface - insecure key store for development jceks key store for supporting both symmetric and asymmetric keys as jks supports only asymmetric keys - add cryptographic algorithm provider pluggable interface - aes-128 and aes-256 algorithm providers support aes-256 is recommended but requires jce unlimited strength policy files for use with older java versions like 6,7,8 aes-128 can be directly used without the additional policy files - rsa algorithm provider support result ------ simple key store for jceks and vault pass the cryptographic providers are in java-client",,perfective,,test,add support,,,
https://github.com/couchbase/couchbase-jvm-core/commit/2a275759d946113cb6271e755f2c892d4ce89178,add thresholdlogreporter building on the previous changesets this one adds a reporter and provides the infrastructure and constructs for logging,,adaptive,,test,provides infrastructure for,,,
https://github.com/couchbase/couchbase-jvm-core/commit/2449867ab71a7deda8dbfe530be4613e9c34a1f0,add thresholdlogtracer as part of the tracing infrastructure the client need to ship out of the bux with a tracer which supports collecting information about spans that are over the treshold,,perfective,,test,need support,,,
https://github.com/couchbase/couchbase-jvm-core/commit/87271a194903f549ad6ad3915125819727e0dccb,add support for kv service tracing as part of the overall tracing efforts the server side (in this case particularly the kv engine) adds the capability to return its overall processing duration as part of the response if negotiated,,perfective,,test,add support,,,
https://github.com/couchbase/couchbase-jvm-core/commit/38a65f59659502ffec5d1651ee3c04cf69fb11d4,negotiate json user agent in hello as part of better tracing capabilities the client must negotiate an identifer in addition to the user agent based on the rfc this format is a json hash with both the agent and the identifier,,perfective,,test,better capabilities,,,
https://github.com/couchbase/couchbase-jvm-core/commit/1b3a6eb53b01d27bc9da45a7b54e87b135392be2,perform log redaction as part of the larger effort to optionally allow and perform log redaction this changeset applies context aware redaction for info warn and error log messages,,perfective,,test,effort to allow,,,
https://github.com/couchbase/couchbase-jvm-core/commit/3444723bdfaaafe38580d99d3fe00b57eba24711,allow to optionally specify a different truststore in certain deployments it can make sense to split up the keymanager and trustmanager certificate management in different files / keystores,,perfective,,test,allow,,,
https://github.com/couchbase/couchbase-jvm-core/commit/a6963ae451f57dc2eb971b6326f93034360f261a,add support for insertdocument and accessdeleted in subdoc doc flags include support for insert document and access deleted in subdocument document flags changes ------- the add document flag is set for inserting new document in a subdocument mutation request and the access deleted flag is set for accessing deleted documents on subdocument requests these options are set as part of the request results ------- the two doc flags work as expected with 50 server release,,perfective,,test,add support include,,,
https://github.com/couchbase/couchbase-jvm-core/commit/8187adf5d2e94899592df210c0fcaebdcd01a880,"add a coresendhook right now it is not possible to hook in before we ""send"" the request into the ringbuffer allowing to introspect the request and also to potentially alternate the observable returned to the upper layers",,perfective,,test,possible allowing alternate,,,
https://github.com/couchbase/couchbase-jvm-core/commit/c24114b8ccac839fe0f048b867bbdac9b7f0291d,"add low-level support for ""enhanced error messages"" in order to support the new 50 ""enhanced error message"" feature where the server sends more infos in the error case to the sdk the client needs to be able to parse those conditionally anf if so make it available to the upper layers",,perfective,,test,add suuport ehanced feature,,,
https://github.com/couchbase/couchbase-jvm-core/commit/a136da17f8abcd5959f27e6aa108289157cf851f,"allow keepalives to recycle dead connections we've been sending the app-level keepalives to each service to make sure that inactive sockets are not cut off by firewalls or other networking equipment to make the system more reliable we can also take the concept of the keepalives and enhance it a bit more to act more like ""heartbeats""",,perfective,,test,allow to,,,
https://github.com/couchbase/couchbase-jvm-core/commit/e6235374790239207ccf8801e33b1f2baf7fcd1c,dont send timed out operations over network it is not very ideal to send timed out operations on the application to the server changes ------- allow to store a reference to the subscriber in the couchbaserequest and add check to see if the subscriber has unsubscribed from the subscriptions list if the subscriber has unsubscribed the request handler will not further process the request results ------- timed out requests will not be sent to the server are covered in java-client,,perfective,,test,ideal allow store ,,,
https://github.com/couchbase/couchbase-jvm-core/commit/42598ece8f9ca5cb30a5b37edd8b56fc82ea360d,support for full document set/get with xattrs allow full document set and get with xattrs using subdoc this is useful for spring data couchbase changes ------- add getdoc and upsertdoc with opcodes op_get and op_set allow doc flag createdocument to be set using submultimutationdocoptionsbuilder and send it as part of extras on multipath mutation commands result ------ full doc set/get with subdoc is possible are covered in java-client,,perfective,,test,support,,,
https://github.com/couchbase/couchbase-jvm-core/commit/cfab1108cbf63634c3b2bdefb4343cf3b6b18428,allow to run hello after auth motiviation to support eol server versions it should be possible to optionally run hello after auth (to prevent the server disconnecting the client over and over again),,perfective,,test,allow possible,,,
https://github.com/couchbase/couchbase-jvm-core/commit/617d99af22e2a0b212dddb36716a5046ff84e54b,"add support for the extended kv error map to be more forwards compatible with future error codes the server adds a new capability called ""the error map"" which is outlined in the internal server documentation as a first step being disabled by default the client should be able to load and store this error map and still log all unknown errors in future changes the new capabilities will be enhanced to actually make use of specific behavior",,perfective,,test,add support,,,
https://github.com/couchbase/couchbase-jvm-core/commit/d95bcbb85d54631f8e214c6ece2e7a2b928b4807,add support for username/password auth in support of rbac allow rbac user/password authentication support changes ------- 1 memcached connection negotiation also includes select_bucket command for rbac users added additional handler for this in keyvalueendpoint 2 internal protected apis (in service and enpointfactory classes) which accept bucket name and password are modified to include username 3 public interfaces (in requests and endpoint classes) which accept bucket name and password are retained by adding an additional overload with username 4 connection string allows username to be set 5 bucket configs additionally store username results ------- requests to core-io can now include username specific rbac are covered in java-client as current inherently the changes,,perfective,,test,add support,,,
https://github.com/couchbase/couchbase-jvm-core/commit/f797dd2e4721de968b3a95dd3da0670bd9e76ab7,add changes to support user management add supporting changes for user management of rbac users through the client changes ------- added upsertuser removeuser getusers requests and responses that can be sent and responded from core requests have the hardcoded endpoint info these requests are encoded to corresponding http request in config handler results ------- added support for user management,,perfective,,test,add supporting,,,
https://github.com/couchbase/couchbase-jvm-core/commit/0c41ef83fb9d13cdc8d2204660b0d5db6f5db8a0,allow to fall back to old services since the new services are implemented in a release there should be an escape valve that allows to force and go back to the old services in case a has slipped through,,perfective,,test,allow to fall back,,,
https://github.com/couchbase/couchbase-jvm-core/commit/2612ce57313c1b234d75ebd36290d8a32ba17c5a,extract interface needed for bucketconfigparser right now it is necessary to implement coreenvironment to parse the configuration with bucketconfigparserparse which is not really necessary and clientenvironment in jdcp does not implement full coreenvironment,,perfective,,test,extract needed,,,
https://github.com/couchbase/couchbase-jvm-core/commit/0c33df8a5d6a7214a9b687d75c2a2c9501c0b08c,support for optional io pool per service in certain cases it has been found that segregating the io event loops for different services provides better performance since they don't disturb each other this is especially true when short-lived but many kv operations interleave with longer running n1ql or view queries,,perfective,,test,support better performance,,,
https://github.com/couchbase/couchbase-jvm-core/commit/7dad8e449dd868d1a845c0c0570d5a5d8d8b4847,extract ssl related settings into secureenvironment jdcp connector (and probably other core-io integrations) are not able to use sslenginefactory without implementing full coreenviornment inteface which might be overkill,,perfective,,test,extract implementing,,,
https://github.com/couchbase/couchbase-jvm-core/commit/e0f01b8e90ecd4417f25e5ef250dc9b0a3ff09a7,add an upper bound to the sentrequestqueue currently when a socket is alive but never responding to requests we write into it as responses never arrive this makes the sentrequestqueue pile up requests and this queue is not bounded,,perfective,,test,add,,,
https://github.com/couchbase/couchbase-jvm-core/commit/c4044e4d23056789868d785fe93ca5203dc9b821,gracefully handle empty partitions in bucket config if for example during warmup or for some other reason the bucket config from the server does not contain partitions the code should gracefully handle this case and send it into retry as it is done under similar conditions,,perfective,,test,gracefully handle,,,
https://github.com/couchbase/couchbase-jvm-core/commit/0d343ede11e3efdc856b9799b03afea9a8c1970a,"consume and log errors for keepalives in a recent user log examined it was found that during a socket close and the cancellation of outstanding requests one of the ""victims"" was a keepalive abstractgenerichandler: exception thrown while cancelling outstanding operation: bucket='null'} rxexceptionsonerrornotimplementedexception: request cancelled in-flight",,perfective,,test,consume,,,
https://github.com/couchbase/couchbase-jvm-core/commit/f76a739978ae9ddec227da89b9b8505fb7bae57d,round robin endpoint selection strategy current endpoint selection strategy is either `random` or based on `partition` it was observed that random selection could lead to a same endpoint being chosen several times in a row and with long running requests (like n1ql queries) this can add up thus a round robin selection is probably a better fit,,perfective,,test,seletion,,,
https://github.com/couchbase/couchbase-jvm-core/commit/748865defba072abd15b7b428dd3c07d08d973e6,add raw n1ql querying msg that returns json in some use cases notably when developing a rest backend that could just build n1ql queries and pass the json response back to a javascript frontend being able to perform a n1ql query and not interpret the response but rather return is raw (json bytebuf) can make sense,,perfective,,test,add able,,,
https://github.com/couchbase/couchbase-jvm-core/commit/5149f452aa80f073fe1fba66a86c91d0cbe8d1ed,catch exceptions that event bus consumers may trigger if any of the downstream consumers throw an exception make sure to catch it so the event bus and its surrounding threads keep moving,,perfective,,,make sure catch,,,
https://github.com/couchbase/couchbase-jvm-core/commit/ad670b46ffb61e78a7c1532f4aff4a31ab168ca0,avoid subscribe() without error handler better to explicitly log errors otherwise we'll get the ugly onerrornotimplemented exceptions,,perfective,,,better,,,
https://github.com/couchbase/couchbase-jvm-core/commit/fd47b831955dc28db3e98ae89f6630617827f12e,decrease environment counter on shutdown and emit event to be more correct the environment now decreses its instance counter so that when properly shutdown and then created no warning is issued,,perfective,,,more correct properly issued,,,
https://github.com/couchbase/couchbase-jvm-core/commit/911c062a30b3c81f2896a867a6ad76499c0f583b,waitstrategy needs to be created for every couchbasecore the change introduced in leads to a performance regression if more than one couchbasecore instance is used in the java-client this means that if more than one couchbasecluster is used and the environment is shared there is under high throughput more contention on the used waitstrategy,,perfective,,,Needs created performance regression high throughput,,,
https://github.com/couchbase/couchbase-jvm-core/commit/5c025b2626ac5a3f8ce6184631a382d7e2ed93aa,implement vbucket retry changes according to rfc in the existing suite of client libraries there is no consistent behaviour defined in terms of how to perform vbucket retries this has resulted in a variety of methods being employed each with its own benefits and drawbacks we now need to align all the sdks to have similar behaviour to ensure that performance expectations do not vary based on sdk,,perfective,,,implement consistent behavior ensure performance expectations ,,,
https://github.com/couchbase/couchbase-jvm-core/commit/cd7b4272bb2228c3e2589fd9072877548970b4f4,n1ql parsing of select raw in some corner cases where maximum throughput must be achieved with n1ql using a `select raw somefield` statement can give a boost but the current streaming parser relies on detecting json objects in the results,,perfective,,,throughput achieved boost,,,
https://github.com/couchbase/couchbase-jvm-core/commit/e399db772f85b934e4d460909bd533791076efe0,allow some requests (n1ql) to target specific node the need has come up for some n1ql queries to be able to target specific nodes in order to emulate a broadcast or multicast on some operations,,perfective,,,allow,,,
https://github.com/couchbase/couchbase-jvm-core/commit/bddc2e0ed929e8a54dbaacbb89c76c86cab7d729,do not encode key twice right now the netty memcached codec takes the key as a string and performs encoding internally this is problematic since the sdk itself also needs to encode the key for routing purposes so as a result the key ends up to be encoded twice from its string representation into a utf-8 byte array this produces unnecessary garbage and wastes cpu cycles,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/3fb03139f0438bad2ff1e3497065552a22b42677,allow dcp connectors to notify core about processing messages to implement flow control efficiently it is necessary to be able to receive notification that the consumer really processed the event (transformed persisted or retransmitted),,perfective,,,allow implement efficiently,,,
https://github.com/couchbase/couchbase-jvm-core/commit/c26b73b00a90ae245aefad5d0c8c1bee359172d7,extract common interface for dcp data messages connectors which built upon the core often need to differentiate between interesting data events (mutation deletion etc) and service events (create new stream query failover logs etc),,perfective,,,extract for,,,
https://github.com/couchbase/couchbase-jvm-core/commit/26c40227545efc7446f127dc7d35d8c4c9411d76,use 0x97 to get last closed checkpoint for partition command 0x48 returns is not very reliable because it returns only sequence numbers for the node,,perfective,,,use to get,,,
https://github.com/couchbase/couchbase-jvm-core/commit/21141c0d0222cc193d594e1cee2560edba6240f1,"implement 0x97 to get last closed checkpoint dcp stream continuation requires the point in history of partition one way is to persist it on the consumer side but to implement ""listen from now"" strategy there is should be a way to get the last sequence number",,perfective,,,implement,,,
https://github.com/couchbase/couchbase-jvm-core/commit/6d238b0d6e8bddddb64e0eb99faece4115daa72d,optimize scheduling for corescheduler right now the code moves the response away from the io pool onto the computation pool for security it does this by creating a worker dispatching the request and then unsubscribing after the fact,,perfective,,,optimize,,,
https://github.com/couchbase/couchbase-jvm-core/commit/1e47f5a0629886296a765c85dadaa739ec15b8c4,one result / cmd on subdoc multimutate change to the subdocument protocol during development introduced the notion of individual results in a multi-mutation for now only commands that return a value include a result (so the binary message could have between 0 and n individual results),,perfective,,,introduced,,,
https://github.com/couchbase/couchbase-jvm-core/commit/b7eb50f70a61d44f4b90cd625ec2840718cbc2f5,apply credentials on search requests fts now expects the request to contain appropriate credentials,,perfective,,,apply appropriate,,,
https://github.com/couchbase/couchbase-jvm-core/commit/128d07550339126fb79539556296de5640d676b2,implement sub-document protocol in core subdocument is a feature in development that allows to read and mutate values deep inside a json document without paying the extra cost of retrieving the whole document,,perfective,,,implement feature,,,
https://github.com/couchbase/couchbase-jvm-core/commit/e00ae3e8746f67645ef16f7e1ecea701338816b0,flow control for dcp server supports a mechanism to track consumer buffer sizes and stepback if it sees that the client lacks free spaces in his buffer this feature is useful to rate limit the stream of changes on high load producers,,perfective,,,supports a mechanism,,,
https://github.com/couchbase/couchbase-jvm-core/commit/787e40cc0e37e6e8b5c714b6d42f1c030107701b,use unicastautoreleasesubject for collecting dcp events subscribers to publishsubject could miss events if they joined too late,,perfective,,,use,,,
https://github.com/couchbase/couchbase-jvm-core/commit/fc75382633403c87f370d4a25a3f281d9d7cce39,k/v command to get mutation tokens there is a simpler way to get initial vbucket high sequence numbers than through stat: get_all_vb_seqnos[1] the command returns what called mutationtoken in terms of sdk except it does not fill vbucket uuid field,,perfective,,,to get,,,
https://github.com/couchbase/couchbase-jvm-core/commit/20ec60c1f837eb09d9a1aef7afe642b4e44dd3c3,allow partial initialization of dcp streams aggregator state it is useful to listen only for some streams of the cluster (for example when splitting load between several kafka producers),,perfective,,,allow initialization,,,
https://github.com/couchbase/couchbase-jvm-core/commit/683eedea8d0e29f46d4299e4a7b5314e6c7b4199,"explicitly set socket timeout and handle it if needed a socket timeout needs to be set to something lower than the netty default (30 seconds) since especially in the 5 second bucket open timeout case this is too long this has some side effects where the code can wait on the connect phase longer than needed leading to ""infinite"" open sequences that would've been able to go to a different node instead",,perfective,,,handle needs,,,
https://github.com/couchbase/couchbase-jvm-core/commit/7e63fe3b445ebe131b910f3dff2647c5f5414d02,improve readability of messages about unknown kv status when unknown error code detected by responsestatusconverter it just outputs the number to the log it will be much better if it can also include some explanation and human-readable representation of the protocol status code,,perfective,,,improve,,,
https://github.com/couchbase/couchbase-jvm-core/commit/0d14c71c487bc8b2ade435bbae3b9ab1023804ae,poll for new config every 10 seconds when no traffic is going through the system and under various other conditions without polling for a new config on a regular basis there is a chance that we miss the addition of query only service nodes,,perfective,,,for new,,,
https://github.com/couchbase/couchbase-jvm-core/commit/171f8f298fc2aba533163dd9df81d62106cd5b5e,eagerly convert doc id string into bytes previously the core will actually conver the document id three times into a utf-encoded byte array: - in the key/value locator - in the handler to calculate the key length - in the codec when the request is encoded since 1 is happening on the core thread and 2&3 on the io threads doing this repetetive task is quite expensive and generates unnecessary gc,,perfective,,,eagerly convert,,,
https://github.com/couchbase/couchbase-jvm-core/commit/f1136b1154787295bdbc2591c52fdd4efdbd0d82,"always log metric events to actually use the metrics we collect in an ""always on"" fashion th default implementation needs to consume metrics and log them",,perfective,,,implementation needs,,,
https://github.com/couchbase/couchbase-jvm-core/commit/ebafbc2d75811c9e89bd42abd019b01c0729e438,only use one pause detector the latency utils that we use for latency collection creates a pause detector per object if not set properly before also it checks every ms and therefore creating lots of context switching,,perfective,,,only use,,,
https://github.com/couchbase/couchbase-jvm-core/commit/9ce2aaa3d15fa64fed907db889c790d0d7ff9dfc,add support for seqno-based observe in addition to cas based observe in combination with the introduced mutation token it is now possible to perform much more accurate observe logic on the sequence number to also detect concurrent mutations and handle failover scenarios much more gracefully (and identify those scenarios),,perfective,,,add support,,,
https://github.com/couchbase/couchbase-jvm-core/commit/2ec94da8032e43cc401c28a7ebccc69d2c1bcdeb,implement api to serialize dcp stream state to simplify dcp state serialization the bucketstreamaggregatorstate should call user-specified hooks each time the state updated,,perfective,,,implement to,,,
https://github.com/couchbase/couchbase-jvm-core/commit/523b0d3e55b44d17342006fe4be4ec275a2db090,publish a configupdatedevent on the event bus certain applications might want to react every time a new configuration is published and it also helps during and development sessions (for example even if a rebalance is going on no new config is published) the event is not as spammy since deduplication happens upfront based on the revid,,perfective,,,publish on,,,
https://github.com/couchbase/couchbase-jvm-core/commit/536c944e556b7c25c9fab1da10a4f465b667701b,"support hello command and feature negotiation to negotiate supported features between the client and the server a new hello command has been introduced the client asks what features are available (that it supports) and the server will respond with the ones it has enabled the common baseline can then be utilized at runtime this allows the client to conditionally use new features like optimized observe optimized ryw n1ql queries or forcing tcp_nodelay on the server side in addition to that it allows for future negotiations like compression datatypes and many more finally on every hello command the client identifies itself with its user agent allowing for better logging and tracing on the server side (which clients are active,)",,perfective,,,support feature,,,
https://github.com/couchbase/couchbase-jvm-core/commit/b087250954a9b8bd83753e342009069783641fb9,shutdown corescheduler properly as described in when a defaultcoreenvironment without custom iopool nor corescheduler is shutdown() the corescheduler threads are not killed this can lead to a thread growth when creating and closing multiple environments also the iopool is cleaned up even if it was user-provided which isn't good since user-provided iopool could be reused somewhere else the user should be in charge of cleaning it in this case,,perfective,,,properly,,,
https://github.com/couchbase/couchbase-jvm-core/commit/df0c4ec81c69f32e8259babd495d964734baa8bc,properly serialize subjects where needed subjects need to be serialized when their on* methods are called potentially from multiple threads in order to prevent concurrent modifications,,perfective,,,properly,,,
https://github.com/couchbase/couchbase-jvm-core/commit/7abd9b90deb4b7c222dfc509bbf67a753d6fa8ce,signal config reload on idle state key value event when no or not much traffic is going through the bucket it can happen that config changes are not properly picked up (especially adding nodes since on node removal the socket is closed which the heuristics pick up) following the resiliency pattern of routine workouts we need to make sure that proper configs are available even if not much load (or no load at all) is going through the system,,perfective,,,reload on,,,
https://github.com/couchbase/couchbase-jvm-core/commit/d018cb2319661471bf2be331f00b5698a9f4e280,log unknown status codes when the server returns an unknown status code a log message with the actual code needs to be written in order to properly the situation,,perfective,,,needs properly,,,
https://github.com/couchbase/couchbase-jvm-core/commit/8769f2303a79fcc34b8dc9cf7674eb6f570935aa,add authentication headers for query since the query service now supports authentication the client needs to send the appropriate headers,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/6670ee9d320cae958e371778867425977f88b14f,properly encode keys with special chars keys with special characters that require more than one byte to represent it have a different byte length than string length in java in order to properly store those characters the code needs to take the encoded byte length rather than the originating string length,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/97e97b1ea455f145b61980dd352c70fe5f61e04b,"allow to disable buffer pooling it might pay off in the future to have a ""kill"" switch to disable buffer pooling this can be used as a temporary workaround if a leak in the client is suspected (and not in the user level code)",,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/aee7ada24a89b682f1226231495b38528100a3b1,determine based on the config if a service is enabled or not the code properly needs to determine if a request can be served at all or not previously it only did check on the environment flags but since the service can be announced through the config a more elaborate logic needs to be put in place,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/9ffe67c4843580d741a961fc613e51c83f695586,allow to fail fast during observe poll cycles when a fail fast strategy is used observe poll cycles also need to return instantly and not take longer than it is needed to decide if the desired state can be reached or not,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/bfd863e1009ce13f5a32bdfca4de87a0225207cf,"fail observe when document is modified concurrently it is possible that while one request is still polling anotherone can interfer with the previous one change the cas and lead to a observe ""modified"" response to give this information to the user it needs to be properly caught and propagated",,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/8d8f95aca2e2bae1e462d8628d4c32e709ab4c3b,fail the observe sequence when replica is not configured on the bucket when the user provides a persistence requirement which is not doable in the first place because it is larger than the number of replicas configured on the bucket it makes sense to fail this observable quickly (since it will never be completed anyways),,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/7fdc20d77b5308f7ee40c3b3bb5efb9e9190ebe7,jvcbc-140: extract buf processing utils and add some methods in queryhandler could be more generally applied furthermore they lack unit,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/94fe30e93a963911d37dc02786f2a76dbe9fe114,"add a generic eventbus and add events a generic eventbus is needed to publish different types of state events to consumers through a ""publish/subscribe"" type interface this commit lays the foundation adds the event bus itself and defines some event types open/close bucket and connect/disconnect node events are also already emitted",,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/4a6a0b0be51c049357075456007400b4b747acb8,allow retrydelay to be configured the retry delay for operations was fixed to 10ms which is not flexible and maybe even too high we can do better with our new delay object,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/5c9af81cf3d0adb5dd8d8dc8b84919e0433c8823,implement retry strategies including fail fast previously requests were retried until they succeed sometimes a fail fast retry strategy is needed in order to reduce the feedback loop when operations cannot be fulfilled right away,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/36c53391f655c1655bced2cc163c3f1c9aa92163,"flexible endpoint pooling the previous service implementation did only support a fixed number of endpoints against every node this had drawbacks: - endpoints (and therefore sockets) are opened for services which do not need to be open at any times this holds true for config (8091) and dcp (11210) services opening sockets to all nodes in the cluster when they are not utilized is wasteful - cases where the number of endpoints must be more than the fixed number are not covered properly and were implemented with some workarounds (for streaming responses in the config service) the new implementation in addition to providing the fixed size service for keyvalue query and views provides an ""on demand"" service which opens and closes endpoints for incoming requests on demand when such a ""transient"" endpoint finishes doing a single req/res cycle it disposes itself this provides better resource utilization and allows for a more flexible service architecture",,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/52303c93178661961da5a72ccabf9c5bffc87a26,implement a dynamic stateful zipper there is the observablezip() functionality available but it does not work on a changing set of incoming streams we need this functionality because sources like endpoints (or nodes) can come and go,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/0c5cecbeab31318e8771c78c25211f0aed287e55,allow observe interval to be configured as in the 1* sdk it should be possible to configure the interval for the observe polling (replicateto persistto) previously it has been fixed to 10ms which can be quite high in different environments,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/4c1ab6e4983f05174d57ed90c17fcb48edcca99c,avoid observeon on the hot code path using observeon for every request adds significant latency and gc since lots of stuff is done in the background in order to reduce latency on the hot code path the observeon should be removed,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/6e4876edcc2e68f01ddea55298fe7a30b8acec73,"send opaque value for key/value handler again spymemcached did always fill the ""opaque"" field of the binary protocol with an opaque value to make sure the returned response matches up with the request as a sanity check",,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/dd1ab36ca7b111fe3223309c79d76b521fc32b50,dcp functionality in order to be able to implement third-party application integrations such as message queues or external indexes low-level api to dcp protocol have to be implemented,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/7f51ab52846e2b86b48ae678e79eea6627077de0,utility class for common bytebuf ops we often need to perform the same operations on bytebufs like release this class allows to centralize such common operations especially in the context of applying them in rx streams,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/108d4bff602f5dce31a0c3f6efa3159aad5c84b5,parse dp4 responses in queryhandler between dp4 and dp3 response format was modified and enriched,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/3c61e2bae4f00d177a0aee8b9adf966a8aeaea7b,fall back to verbose config if terse returns 404 when the terse bucket config over http is not accessible (which is the case on older server versions) the code needs to fall back to the verbose config when it both fails or just returns a 404 not found,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/53690c700c50efa37fcad18bdba927d901fc2a98,if error in decoderesponse send to rx internal errors (exception thrown) in handler's decoderesponse are not caught until netty catches them,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/825a88d4d5af9714deed0bc9e5d3d07ef1be141e,do not manually cancel subscription on retry when an operation is scheduled for retry the subscription should not manually be removed this can cause npes since its subject to a race condition in addition this code is not known to bring an actual benefit,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/513592b4ed348651f28a76f3916cc0b08fa03978,use the right scheduler on bootstrap and increase logging it was discovered that some parts of the bootstrap process where using the core and io threads too much while they instead should be moved to the computations scheduler earlier to free resources increased logging has been added to the bootstrap process so that when debug is enabled it is easer to find spots where threading is incorrect,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/60fa37648fdc1d70d840293cde11d80fef8670b4,view & query node locator only touches first node even if more nodes are available because counter is never incremented only the first available node is tried to find a suitable node to write the request to,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/024a77ef2f9a8e7dcad701391ef435d4e4b1b1e0,: improve the check for closed buckets after the first refactor (see initial commit of some npe arise because the check is too strong additional types of request must be allowed to pass through,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/93de72e95e7e41eacb829ba73ee53c276ed38b38,after failover select different node also this change hardens the handler when ops are cancelled so that anything that will be thrown by the subscriber does not kill the event loop as well,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/7bb5e34d6b8cde65a968274515b449e88f72e99c,specify generated version in http headers,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/5d5c4da6613f14b5e4bdb37adde82a912e79b7d4,add basic support for memcached buckets,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/39d67127b702ba38de44e9e7a6667a991a7af59a,support for bucket management operations,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/c549729cdd82423b1a05b25e1fbabda1bbd07ba5,add support for cluster config command,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/eca0240c5ad49e5c45da936b1e1ea5c4483115a7,add support for individual bucket closing,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/3d431894e4e4a633ddc6698aa5fb56a242fb07af,adding missing copyright headers,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/30732f8eb9b04ff58f94ac50f9ee5f315154add3,adapt logging namings,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/7520fdde70458a6f60e8d66945213836a8e9d38f,add support for touch and unlock,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/c7a5c95d33d10b46eafde4bea26b38cadf802faf,add support for get + lock / get + touch,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/54705313c07d66f1f88949cae7c36399da8ba3dd,supporting code for replica get,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/ce99b13f8ee9e1c2f8344dd4aa630e1229ed59bc,implement basic support for http config management,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/64b424e36f11bf38cfc7472727bcf1dabac336e5,implement hello command the hello command can be used to negotiate certain features between server and client for now json and compression are supported for datatypes also a config setting is exposed which allows to manually disable and change thresholds,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/7ccef4a0b081e619020ef3f73da81ecdbdffa9fb,implement basic http-based streaming config add nodes,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/b17b8657e46df68967cb14705ebd1c1ea72d67d4,proper fallback and manual disable of config loading,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/e9f34619c005f68c621f8ea9c005e7fc113e35ab,adding support for: - http bootstrap (terse and non-terse as fallback) - rebalance in support for carrier only through nmvb this is the first set of changes which will enable rebalance support,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/d814e9f7c9cd9346a319f8372f9dac488df4c5b4,adding support for disconnect,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/494f4edbdd251aa4bf92f36de594983d4dcbd0e9,adding ssl support without certificate verification,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/656828f47d31402b57101ec8304b3e1f1b8bc6cf,make sasl auth work automatically,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/827d883d4fcb2a30fdde38856f06787cdefb369a,make simple json stream parsing work for views,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/82e0d17de0ef3cbcac8d2aa1d421f6a6590cea70,add very simple view capabilities (no streaming yet),,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/5798ab408baf02617f36ff9a257a281ca2d77e38,adding remove and cas to responses,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/1607b8f7783a9db12e983fe5aa88aa85342036b3,more binary operators and some integration,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/c5cedbc7619e641dbc57cf4d4c0be7554c41dd09,make it pick up new configs (add),,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/c495c531ef0782d7632985b62c679b92d411a822,adding separate response handling through a ringbuffer,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/d95860c9b7607c327aed66e0076d17cfc85fb8c5,adding service handling and seednode info,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/6168a5440e61f96f1a179712b9b32e5662e450f8,initial config interfaces and integration,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/55c6a4f1a233a8a156ec1649695be22443d2a798,adding first simple registry add benchmark,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/41347584528d8f8295888cf622e796bd5cda3b69,adding benchmarking and readme for,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/99f939fe8ecf34e44bc8bb58b7c558711537bfbf,more endpoint benchmark stuff,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/df3ca88dc432b828977fe0579d233572e60835a2,adding simple binary config loading,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/2e6e77b966e6aa0e5e015ad9ad93503bb85c8cd8,more config loading adding json config,,perfective,,,,,,
https://github.com/couchbase/couchbase-jvm-core/commit/ce7878a65920a369874aa8c89accda6d12ee06cc,recover earlier than os tcp timeout it has been found that when a tcp connection is in a half-open state the app-level keepalive may not function as intended since operations are still in-flight but will never complete usually this situation resolves itself when the tcp idle timers/keepalives fire on the os level although this can take a long time and is not reliable enough since it depends on config params which we do not control,,corrective,,test,recover not function,,,
https://github.com/couchbase/couchbase-jvm-core/commit/87253903eafae6e5d6ecc94d5200f7ac41a429fb,properly clean up services on failed connect it was found that when the bootstrap list node is mixed with kv and non-kv nodes the non-kv nodes won't be able to bootstrap right now it all works but its not cleaning up the sockets (services) behind that can't be used - this leads to exceptions in the logs and in general not the behavior intended,,corrective,,test,failed exceptions,,,
https://github.com/couchbase/couchbase-jvm-core/commit/45ed2718ece02a3bd095209a275427e561db7ab5,handle npe on a bad host in connection string the client will exit with a npe if a connection string contains both good and bad hosts changes ------- connection string adds a static method that will check if the hosts are resolvable the older static method parsehosts and a list of unresolved hosts is retained for unit results ------- the bootstrap continues successfully with bad hosts the integration will be added in the client,,corrective,,test,bad,,,
https://github.com/couchbase/couchbase-jvm-core/commit/6c2d3f7dce40749e27c30cfa148a54b52d720df5,switch to different snappy for compression originally we've been using the snappy code from netty but since we found issues in both the encoder and decoder side the stability of it has been in question,,corrective,,test,issues,,,
https://github.com/couchbase/couchbase-jvm-core/commit/df11279a452acbc88715ef334f7f5aac2e7fb9ad,explicitly handle auth errors on observe with server 50 and rbac it is now possible that a user only has write access but not read access leading to the situation where a persistto or replicateto might fail after correctly storing the doc but then the user is not allowed to use the observe command,,corrective,,test,errors fail,,,
https://github.com/couchbase/couchbase-jvm-core/commit/14d06355fc84a343bbc5cdf47ffdc6fd20c0fcd3,"fix hostname fallback in mds environment couchbase terse config might skip ""hostname"" property of entries in ""nodesext"" when the node configured on localhost to mitigate that sdk tries to fetch hostname from ""nodes"" array in mds environment where not every node has data service falling back ""nodes"" array will have only entries where data service has been enabled which leads to indexoutofboundsexception during aforementioned fallback mechanism",,corrective,,test,fix fallback,,,
https://github.com/couchbase/couchbase-jvm-core/commit/a06b6a293feb05c15d1491687ea4d77189a73833,clean up stateful resources on configurationprovider termination it has been observed that when a cluster instance is created and deleted many times in a row a memory leak shows up which can be characterized as the following: the carrierrefresher subscribes to the 10 second config polling interval but never unsubsribes it on shutdown this has no consequences if in regular use only one cluster instance is created and terminated on shutdown but if it is cycled many times one can observe the increased memory usage in a profiler,,corrective,,test,leak,,,
https://github.com/couchbase/couchbase-jvm-core/commit/711afb196388f7bf9f4f3ee97695e0e74f0800a7,disable pipelining for http services in forum posts as well as other tickets it has been discovered that the implicit pipelining netty/core-io uses doesn't work well with the go implementation of pipelining in http 11 in fact it doesn't work at all and leads to all kinds of weird issues especially prematurely aborted (n1ql) requests that return 0 as the result count as a result we need to disable pipelining for http based services but for performance reasons keep it for binary ops,,corrective,,,disable doesn't work,,,
https://github.com/couchbase/couchbase-jvm-core/commit/1a7d65be5a6ca612e6f5ca51f3b757bd2ac75af3,"fix queries not load balancing correctly when in mds the round robin mechanism for locating the proper nodes on query fts and views correctly used an ""offset"" when iterating through the node list but the list also includes nodes with different services in a setup like this: | node a: kv | node b: kv | node c: query | node d: query | round robin would skip forward on the nodes where query is not enabled leading to queries being sent to: c c c d c c c d since c would handle offsets for a and b respectively in non-mds this is not an issue since query nodes are available on all machines in other constellations this is not an issue as well but the ordering can't be controlled by the user and as a result is non-deterministic query service is illustrated but the same issue is found in fts and views",,corrective,,,fix not correctly,,,
https://github.com/couchbase/couchbase-jvm-core/commit/28aa1b50759da2964396cd03690ac8da99f06891,"properly retry ssl handshake failures ssl handshake failures did bubble up the io exception handling but were not reported and ""handled"" properly inside the couchbase code",,corrective,,,properly failures,,,
https://github.com/couchbase/couchbase-jvm-core/commit/5cac85755d715da78561a534af0461112dc055a3,handle erange and rollback during stream open during opening dcp stream server might respond with erange(0x22) or rollback(0x23) and at the core library does not handle these errors which leaves to inability to resume state,,corrective,,,does not errors inablity,,,
https://github.com/couchbase/couchbase-jvm-core/commit/47140e3a328da72e453f64461c092b6560081263,avoid race condition between disconnect and reconnect there is a (small) chance that both the disconnect and a reconnect initiated by a closed socket race each other and the endpoint despite being explicitly disconnected ends up in a reconnect loop,,corrective,,,avoid race condition,,,
https://github.com/couchbase/couchbase-jvm-core/commit/995c5953c5211344a53f6efdc4108839db87e53e,populate bucketnodelocator because the code uses the nodelocator field as part of the config to select the proper subclass in jackson it is not accessible through the regular json accessors,,corrective,,,not accessible,,,
https://github.com/couchbase/couchbase-jvm-core/commit/8759779ebf9dfddfd2b18f81957b1e527c471899,handle errors in views properly after rows the current streaming parser was incorrect in the assumption that either errors or rows are emitted from a view response in fact the error can optionally come after the rows are emitted if no errors are emitted an empty list of rows is presented,,corrective,,,errors incorrect,,,
https://github.com/couchbase/couchbase-jvm-core/commit/b375016700c6443305cebdd0b0a7ccd31562a7be,fix signature parsing when not object the parser expected the signature part of the response to be a json sub-object it turns out it can be any valid json entity: json object array boolean scalar string scalar maybe even null boundaries detection of the signature part expecting a json object the parser fails when something else is present,,corrective,,,fails,,,
https://github.com/couchbase/couchbase-jvm-core/commit/9ec906efbe371c6f1b9baeeec1eceb2fcfc5425c,only write keepalive when writable to avoid errors the keepalive should only be sent when the channel is active and writable,,corrective,,,avoid errors,,,
https://github.com/couchbase/couchbase-jvm-core/commit/1b3d0ab961d01a2efc582484eaf1de7e4b2a74fd,automatically release not subscribed bytebufs on view and query when view or n1ql queries are run and then not all subjects are properly subscribed to (which can easily happen if for example an error happens and one only listens to rows) then the code leaks bytebufs,,corrective,,,leaks,,,
https://github.com/couchbase/couchbase-jvm-core/commit/0e571c4039c8ae9a2ac6a9addcc4f4ace1961bb7,avoid indexoutofbounds when parsing view rows off by one erros can raise exceptions in the view and query handler when looking for the closing },,corrective,,,errors exceptions,,,
https://github.com/couchbase/couchbase-jvm-core/commit/60878f40d189b767e579c5f497214b6dcf3c0621,fix queryhandler indexoutofbounds there could be an indexoutofboundsexception in queryhandler's internal findsectionclosingposition method,,corrective,,,Out Bounds,,,
https://github.com/couchbase/couchbase-jvm-core/commit/4d4f050a63f85cd7fb14706cc4bb86930f1366ee,release observe content properly when observe is used the content needs to be properly freed actually the content is not needed at all so it can be freed right in the key/value handler,,corrective,,,leaking,,,
https://github.com/couchbase/couchbase-jvm-core/commit/02d587c07d99e6917a5db6217ca3359b1e9a8f4d,do not propose invalid config in carrier refresher the refresher needs to make sure that only valid configs are proposed to the the configuration provider especially when the polling happens against an older cluster the command might not return a successful json configuration,,corrective,,,invalid not return,,,
https://github.com/couchbase/couchbase-jvm-core/commit/14efb13c4fdb42f17ec4fa7a67b72e92814fec8e,fix node pickup on rebalance when a rebalance occurs the client fails to pick up changes in nodes list and will stay in a state where no data operation succeed this is due to a race condition where the locator's list of nodes is out of date with the atomically updated configuration host array this results in an illegalstateexception because we look for a node (from the configuration) not contained in the nodes list,,corrective,,,fails race condition,,,
https://github.com/couchbase/couchbase-jvm-core/commit/68377aa00e51933f33302d04e4c0877a88fb93d0,: if bucket was closed operations will throw a bucketclosedexception after closing a bucket one expects not to be able to use the bucket anymore however subsequent request are not rejected gracefully and usually result in a timeoutexception (for example for a getrequest),,corrective,,,failed Exception,,,
https://github.com/couchbase/couchbase-jvm-core/commit/3acdc388d8ca00c87c300e84f771ec648481159a,adding more support for services down,,corrective,,,down,,,
https://github.com/couchbase/couchbase-jvm-core/commit/1cf1d5086c8b35f5d7adda4ea56220858e2b103a,ignore unknown bucketcapabilities it was found that with the default settings jackson is pretty strict about what happens if a value cannot be matched to an enum value causing problems when the server adds a new capability that the client does not understand,,corrective,,,causing problems,,,
https://github.com/couchbase/couchbase-jvm-core/commit/2e8fa3f71993befbd444f6dd4c98999223a391c7,backport objectsrequirenonnull from java 7,,adaptive,,,backport from AAA,,,
https://github.com/couchbase/couchbase-jvm-core/commit/a264c7ab992b8d07920d9f7926d7c947492bdc22,add sdk compatible memcached hashing current memcached bucket ketama hashing strategies are not compatible with libcouchbase and go sdk derivates since the way the key is hashed is a bit different,,adaptive,,,sdk compatible,,,
https://github.com/couchbase/couchbase-jvm-core/commit/535eed12fc9eb2f2d523ed873344f6235622b669,"add basic health check api support to expose a simple ""health check"" api at the upper layers that provide quick insight into the sockets connected in the sdk the core-io layer is responsible for assembling all this information and presenting it up the stack in an easy to use fashion",,adaptive,,,BBB support,,,
https://github.com/couchbase/couchbase-jvm-core/commit/320d5914a081338ea377c964f13dbae43e6fbcb0,add support for subdocument get count in couchbase server 50 a new lookup command (get count) is introduced which allows to fetch the number of items for a given path in a document,,adaptive,,,support AAA,,,
https://github.com/couchbase/couchbase-jvm-core/commit/035bef769679b5bc3ac64a467c731344b652508d,locked & finishing touches for xerror with recent development of the xerror & kv error map in the spock server release a couple of adjustments need to happen in core-io to be in-line with it,,adaptive,,,Recent adjustments BBB,,,
https://github.com/couchbase/couchbase-jvm-core/commit/bd14c5e39312bd0846c69f1430dcb22f0f9cdd4e,add extended support phase 2 for kv error map couchbase server 50 provides key value error map with hints on handling errors on response add support to parse and consume the error map hints changes ------- the following changes have been added to the key value response handler - parses the retry specifications available for auto-retry attribute - consumes and records the retry specifications on the request itself - reconnect retry if connection state invalidated attribute is present - send config invalidated message if config update attribute is present - changed error code type from short to long in error map keys to accomodate unsigned shorts updated mock to version including the namespace changes mock integration have been added to verify constant linear and exponential retries results ------- error map is parsed and consumed verification pass,,adaptive,,,Extended Support,,,
https://github.com/couchbase/couchbase-jvm-core/commit/6ad3036b6ec8b6ab4511b8f6422f0501d48b672d,integrate yasjl as optional use a generic json parser for streaming query response changes ------- adds yasjl parser as part of utils queryhandler v2 uses yasjl parser to parse query responses the default handler is query handler while v2 can be enabled by setting system property comcouchbaseenableyasjlresponseparser to true extended from results ------- generic json parser can be used to parse query responses,,adaptive,,,integrate AAA,,,
https://github.com/couchbase/couchbase-jvm-core/commit/e72a446579530c8b25a20bcc6c27c0ec965969fc,add support for couchbase analytics since couchbase server will add new analytics capabilities (first standalone then integrated) this changeset adds the core functionality for requests and responses which upper level components can build on,,adaptive,,,support AAA capabilities,,,
https://github.com/couchbase/couchbase-jvm-core/commit/ad78b3cd248f7c7b289178ba1bb9553a47739551,add xattr support allow extended attribute access using subdoc requests changes ------- added flag which allows access to extended attributes builders are added for lookup and mutation commands in multi path commands to allow for access flag or other attibutes to be set for single path requests the abstract request class has the extra attributes hello commands also requests for extended attributes feature if available to be turned on hello request change is backward compatible server ignores the command that are not available verified using unit in results ------- extended attributes can be accessed by setting accessattribute value to true,,adaptive,,,AAA support extended attribute,,,
https://github.com/couchbase/couchbase-jvm-core/commit/7ef023d33c6e847f2d1cf5a95a45847b3262e79d,"add support for legacy memcached node hashing the node hashing for ketama in the 2x sdk series is different than in the 1x series because of this using the 1x and 2x series togther for memcached buckets is incompatible to make both work together this changeset makes it possible to plug in a ""legacy"" node hashing mechanism that is compatible with the 1x series",,adaptive,,test,support legacy SDK compatible ,,,
https://github.com/couchbase/couchbase-jvm-core/commit/19ee5bc6c9ff7ae9920e12f890f4634b6f7a7dbb,"initial api for full text the couchbase server ""watson"" release will add support for full text indexing as a result the sdks need to provide first-class apis to make it possible to easily query those indexes",,adaptive,,test,support BBB,,,
https://github.com/couchbase/couchbase-jvm-core/commit/e3e30fe7aa9aff7b71bc3878613d986166186679,implement stat command in order to have access to micro-protocols built atop stat command core library have to support this command,,adaptive,,test,library support,,,
https://github.com/couchbase/couchbase-jvm-core/commit/502952b8785f5c65e82067324c64ad47dbc1f134,adding keepalive in kv/query/views in previous versions of the sdk a pinger was in place in order to try to prevent socket closing because of idle time a similar feature is needed on 2x sdk,,adaptive,,test,versions SDK,,,
https://github.com/couchbase/couchbase-jvm-core/commit/dd5b0312a28dbe09b8df3013a3d7db295bd6e28b,adding keepalive in kv/query/views in previous versions of the sdk a pinger was in place in order to try to prevent socket closing because of idle time a similar feature is needed on 2x sdk,,adaptive,,test,versions SDK,,,
https://github.com/couchbase/couchbase-jvm-core/commit/27ef034ade211e31d78954849d758f6099f0ffae,implement ssl certificate validation through the jks,,adaptive,,test,through AAA,,,
https://github.com/couchbase/couchbase-jvm-core/commit/d8c4e24229fd554858ad9782cfa8a410955fb2b1,adding the sasl handler,,adaptive,,,AAA handler,,,
https://github.com/couchbase/couchbase-jvm-core/commit/ab0bcb21ddd138facb7a69f32919e2355882678d,go back to netty 41,,adaptive,,,back AAA,,,
